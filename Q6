Q6. Find the length of the longest substring without repeating characters. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example.

Problem:
Given a string, find the length of the longest substring without repeating characters.

Algorithm (Sliding Window + HashMap):
- Use two pointers left and right.
- Use a HashMap to track characters in the current window.
- Move right, if duplicate found, update left.
- Update max length at every step.

import java.util.HashMap;

public class LongestSubstring {
    static int longestSubstring(String s){
        HashMap <Character, Integer> map = new HashMap<>();
        int left=0, right=0;
        int n = s.length();
        int len=0;
        while(right<n){
            if(map.containsKey(s.charAt(right))){
                left = Math.max(left, map.get(s.charAt(right)) + 1);
            }
            len = Math.max(len, right-left+1);
            map.put(s.charAt(right), right);
            right++;
        }
        return len;
    }

    public static void main(String args[]) {
        String str = "abba";
        System.out.println("The length of the longest substring without repeating characters is " + longestSubstring(str));
    }
}

Time Complexity: O(n)
Space Complexity: O(n)

