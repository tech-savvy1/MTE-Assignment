Q6. Find the length of the longest substring without repeating characters. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable 
example.

Problem:
Given a string, find the length of the longest substring without repeating characters.

Algorithm (Sliding Window + HashSet):
- Use two pointers left and right.
- Use a HashSet to track characters in the current window.
- Move right, if duplicate found, remove from left until it's unique.
- Update max length at every step.

import java.util.*;

public class LongestUniqueSubstring {
    public static int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int left = 0, maxLength = 0;

        for (int right = 0; right < s.length(); right++) {
            while (set.contains(s.charAt(right))) {
                set.remove(s.charAt(left++));
            }
            set.add(s.charAt(right));
            maxLength = Math.max(maxLength, right - left + 1);
        }
        return maxLength;
    }

    public static void main(String[] args) {
        String s = "abcabcbb";
        System.out.println("Longest unique substring length: " + lengthOfLongestSubstring(s));
    }
}

Time Complexity: O(n)
Space Complexity: O(min(n, m)) where m = number of unique characters

