Q11.  Find two numbers in a sorted array that add up to a target. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example.

Algorithm (Two Pointers):
- Set two pointers: left = 0, right = n-1.
- Calculate sum = arr[left] + arr[right].
- If sum == target → return (left, right).
- If sum < target → move left pointer.
- If sum > target → move right pointer.

Program:
import java.util.HashMap;
import java.util.Arrays;

public class TwoSum {
    static int[] twoSum(int[] arr, int target){
        HashMap <Integer, Integer> map = new HashMap<>();
        for(int i=0; i<arr.length; i++){
            int complement = target - arr[i];
            if(map.containsKey(complement)){
                return new int[] {map.get(complement), i};
            }
            map.put(arr[i], i);
        }
        return new int[] {-1, -1};
    }

    public static void main(String[] args) {
        int arr[] = {2,7,11,15};
        int target = 9;
        System.out.println(Arrays.toString(twoSum(arr, target)));
    }

Time complexity: O(n)
Space Complexity: O(n)
}

